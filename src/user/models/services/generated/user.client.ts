/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.7.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AuthClient {
  constructor(
    private baseApiUrl: string,
    private headers: Headers,
  ) {}

  getBaseUrl(requestedUrl?: string) {
    return requestedUrl ? requestedUrl : this.baseApiUrl;
  }

  transformHttpRequestOptions(options: RequestInit): Promise<RequestInit> {
    if (!!options?.headers) {
      this.headers?.forEach((value, key) => {
        (options.headers as any)[key] = value;
      });
    }

    return Promise.resolve(options);
  }
}

export class AccessTokenAuthClient {
  constructor(private authClient: AuthClient) {}

  getBaseUrl(defaultUrl: string, baseUrl?: string) {
    return this.authClient.getBaseUrl(baseUrl);
  }

  transformOptions(options: RequestInit): Promise<RequestInit> {
    return this.authClient.transformHttpRequestOptions(options);
  }
}

export interface RoleResponse {
    id: string;
    name: string;
}

export interface AppResponse {
    appId: string;
    appName: string;
}

export interface AuthResponse {
    application: AppResponse;
    created: string;
}

export interface UserResponse {
    id: string;
    username: string;
    firstName: string;
    lastName: string;
    email: string;
    created: Date;
    hasGrantedAccess: boolean;
    grantedAccessOn: Date;
    roles: RoleResponse[];
    apps: AppResponse[];
    auths: AuthResponse[];
}

export interface UpdatePasswordRequest {
}

export interface ErrorResponse {
    statusCode: number;
    message: string;
    timestamp: string;
    path: string;
    "x-request-id": string;
}

export interface UsersResponse {
    users: UserResponse[];
    total: number;
    hasNextPage: boolean;
    page: number;
    take: number;
}

export interface UserRoleRequest {
    roleId: string;
}

export interface UserRequest {
    firstName: string;
    lastName: string;
    email: string;
    roles: UserRoleRequest[];
}

export interface UpdateUsersAccessRequest {
    grantAccess: boolean;
    userIds: string[];
    applicationIds: string[];
}

export interface UpdateUserAccessRequest {
    grantAccess: boolean;
    applicationIds: string[];
}

export interface UpdateUserRoleRequest {
    rolesToAdd: string[];
    rolesToRemove: string[];
}

export interface GetApplicationsResponse {
    applications: AppResponse[];
    total: number;
    hasNextPage: boolean;
}

export interface GetApplicationUsersResponse {
    users: string[];
    total: number;
    hasNextPage: boolean;
}

export interface AuthBody {
    /** The e-mail of the user */
    email: string;
    /** The password of the user */
    password: string;
    /** The application id you want to login against */
    applicationId: string;
}

export interface Token {
    type: string;
    accessToken: string;
    refreshToken: string;
    expiresIn: number;
}

export interface RegisterRequest {
    email: string;
    firstName: string;
    lastName: string;
    password: string;
    confirmPassword: string;
}

export interface OkResponse {
    statusCode: number;
    message: string;
}

export interface ResetRequest {
    email: string;
    applicationId: string;
}

export enum Role {
    User = "User",
    Administrator = "Administrator",
    Api = "Api",
}

export interface RoleExtraModels {
    role: Role;
}

export interface AuthEvent {
    userId: string;
    applicationId: string;
}